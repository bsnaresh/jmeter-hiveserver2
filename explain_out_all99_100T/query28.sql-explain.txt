Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Map 1 (SIMPLE_EDGE)
Reducer 11 <- Map 1 (SIMPLE_EDGE)
Reducer 12 <- Map 1 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (XPROD_EDGE), Reducer 8 (XPROD_EDGE)
Reducer 4 <- Reducer 3 (XPROD_EDGE), Reducer 9 (XPROD_EDGE)
Reducer 5 <- Reducer 10 (XPROD_EDGE), Reducer 4 (XPROD_EDGE)
Reducer 6 <- Reducer 11 (XPROD_EDGE), Reducer 5 (XPROD_EDGE)
Reducer 7 <- Reducer 12 (XPROD_EDGE), Reducer 6 (XPROD_EDGE)
Reducer 8 <- Map 1 (SIMPLE_EDGE)
Reducer 9 <- Map 1 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 llap
      File Output Operator [FS_59]
        Limit [LIM_58] (rows=1 width=144)
          Number of rows:100
          Select Operator [SEL_57] (rows=1 width=144)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"]
            Merge Join Operator [MERGEJOIN_70] (rows=1 width=144)
              Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"]
            <-Reducer 12 [XPROD_EDGE] llap
              XPROD_EDGE [RS_55]
                Group By Operator [GBY_40] (rows=1 width=24)
                  Output:["_col0","_col1","_col2"],aggregations:["avg(VALUE._col0)","count(VALUE._col1)","count(DISTINCT KEY._col0:0._col0)"]
                <-Map 1 [SIMPLE_EDGE] vectorized, llap
                  SHUFFLE [RS_39]
                    Group By Operator [GBY_88] (rows=15881910 width=103)
                      Output:["_col0","_col1","_col2","_col3"],aggregations:["avg(ss_list_price)","count(ss_list_price)","count(DISTINCT ss_list_price)"],keys:ss_list_price
                      Select Operator [SEL_87] (rows=10667359686 width=27)
                        Output:["ss_list_price"]
                        Filter Operator [FIL_86] (rows=10667359686 width=27)
                          predicate:(ss_quantity BETWEEN 6 AND 10 and (ss_list_price BETWEEN 91.0 AND 101.0 or ss_coupon_amt BETWEEN 1430.0 AND 2430.0 or ss_wholesale_cost BETWEEN 32.0 AND 52.0))
                          TableScan [TS_0] (rows=288018711538 width=27)
                            tpcds_orc@store_sales,store_sales,Tbl:COMPLETE,Col:PARTIAL,Output:["ss_quantity","ss_wholesale_cost","ss_list_price","ss_coupon_amt"]
            <-Reducer 6 [XPROD_EDGE] llap
              XPROD_EDGE [RS_54]
                Merge Join Operator [MERGEJOIN_69] (rows=1 width=120)
                  Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14"]
                <-Reducer 11 [XPROD_EDGE] llap
                  XPROD_EDGE [RS_52]
                    Group By Operator [GBY_33] (rows=1 width=24)
                      Output:["_col0","_col1","_col2"],aggregations:["avg(VALUE._col0)","count(VALUE._col1)","count(DISTINCT KEY._col0:0._col0)"]
                    <-Map 1 [SIMPLE_EDGE] vectorized, llap
                      SHUFFLE [RS_32]
                        Group By Operator [GBY_85] (rows=15881910 width=103)
                          Output:["_col0","_col1","_col2","_col3"],aggregations:["avg(ss_list_price)","count(ss_list_price)","count(DISTINCT ss_list_price)"],keys:ss_list_price
                          Select Operator [SEL_84] (rows=10667359686 width=27)
                            Output:["ss_list_price"]
                            Filter Operator [FIL_83] (rows=10667359686 width=27)
                              predicate:(ss_quantity BETWEEN 11 AND 15 and (ss_list_price BETWEEN 66.0 AND 76.0 or ss_coupon_amt BETWEEN 920.0 AND 1920.0 or ss_wholesale_cost BETWEEN 4.0 AND 24.0))
                               Please refer to the previous TableScan [TS_0]
                <-Reducer 5 [XPROD_EDGE] llap
                  XPROD_EDGE [RS_51]
                    Merge Join Operator [MERGEJOIN_68] (rows=1 width=96)
                      Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                    <-Reducer 10 [XPROD_EDGE] llap
                      XPROD_EDGE [RS_49]
                        Group By Operator [GBY_26] (rows=1 width=24)
                          Output:["_col0","_col1","_col2"],aggregations:["avg(VALUE._col0)","count(VALUE._col1)","count(DISTINCT KEY._col0:0._col0)"]
                        <-Map 1 [SIMPLE_EDGE] vectorized, llap
                          SHUFFLE [RS_25]
                            Group By Operator [GBY_82] (rows=15881910 width=103)
                              Output:["_col0","_col1","_col2","_col3"],aggregations:["avg(ss_list_price)","count(ss_list_price)","count(DISTINCT ss_list_price)"],keys:ss_list_price
                              Select Operator [SEL_81] (rows=10667359686 width=27)
                                Output:["ss_list_price"]
                                Filter Operator [FIL_80] (rows=10667359686 width=27)
                                  predicate:(ss_quantity BETWEEN 16 AND 20 and (ss_list_price BETWEEN 142.0 AND 152.0 or ss_coupon_amt BETWEEN 3054.0 AND 4054.0 or ss_wholesale_cost BETWEEN 80.0 AND 100.0))
                                   Please refer to the previous TableScan [TS_0]
                    <-Reducer 4 [XPROD_EDGE] llap
                      XPROD_EDGE [RS_48]
                        Merge Join Operator [MERGEJOIN_67] (rows=1 width=72)
                          Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                        <-Reducer 3 [XPROD_EDGE] llap
                          XPROD_EDGE [RS_45]
                            Merge Join Operator [MERGEJOIN_66] (rows=1 width=48)
                              Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            <-Reducer 2 [XPROD_EDGE] llap
                              XPROD_EDGE [RS_42]
                                Group By Operator [GBY_5] (rows=1 width=24)
                                  Output:["_col0","_col1","_col2"],aggregations:["avg(VALUE._col0)","count(VALUE._col1)","count(DISTINCT KEY._col0:0._col0)"]
                                <-Map 1 [SIMPLE_EDGE] vectorized, llap
                                  SHUFFLE [RS_4]
                                    Group By Operator [GBY_73] (rows=47552307 width=103)
                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["avg(ss_list_price)","count(ss_list_price)","count(DISTINCT ss_list_price)"],keys:ss_list_price
                                      Select Operator [SEL_72] (rows=32002079058 width=27)
                                        Output:["ss_list_price"]
                                        Filter Operator [FIL_71] (rows=32002079058 width=27)
                                          predicate:(ss_quantity BETWEEN 0 AND 5 and (ss_list_price BETWEEN 11.0 AND 21.0 or ss_coupon_amt BETWEEN 460.0 AND 1460.0 or ss_wholesale_cost BETWEEN 14.0 AND 34.0))
                                           Please refer to the previous TableScan [TS_0]
                            <-Reducer 8 [XPROD_EDGE] llap
                              XPROD_EDGE [RS_43]
                                Group By Operator [GBY_12] (rows=1 width=24)
                                  Output:["_col0","_col1","_col2"],aggregations:["avg(VALUE._col0)","count(VALUE._col1)","count(DISTINCT KEY._col0:0._col0)"]
                                <-Map 1 [SIMPLE_EDGE] vectorized, llap
                                  SHUFFLE [RS_11]
                                    Group By Operator [GBY_76] (rows=15881910 width=103)
                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["avg(ss_list_price)","count(ss_list_price)","count(DISTINCT ss_list_price)"],keys:ss_list_price
                                      Select Operator [SEL_75] (rows=10667359686 width=27)
                                        Output:["ss_list_price"]
                                        Filter Operator [FIL_74] (rows=10667359686 width=27)
                                          predicate:(ss_quantity BETWEEN 26 AND 30 and (ss_list_price BETWEEN 28.0 AND 38.0 or ss_coupon_amt BETWEEN 2513.0 AND 3513.0 or ss_wholesale_cost BETWEEN 42.0 AND 62.0))
                                           Please refer to the previous TableScan [TS_0]
                        <-Reducer 9 [XPROD_EDGE] llap
                          XPROD_EDGE [RS_46]
                            Group By Operator [GBY_19] (rows=1 width=24)
                              Output:["_col0","_col1","_col2"],aggregations:["avg(VALUE._col0)","count(VALUE._col1)","count(DISTINCT KEY._col0:0._col0)"]
                            <-Map 1 [SIMPLE_EDGE] vectorized, llap
                              SHUFFLE [RS_18]
                                Group By Operator [GBY_79] (rows=15881910 width=103)
                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["avg(ss_list_price)","count(ss_list_price)","count(DISTINCT ss_list_price)"],keys:ss_list_price
                                  Select Operator [SEL_78] (rows=10667359686 width=27)
                                    Output:["ss_list_price"]
                                    Filter Operator [FIL_77] (rows=10667359686 width=27)
                                      predicate:(ss_quantity BETWEEN 21 AND 25 and (ss_list_price BETWEEN 135.0 AND 145.0 or ss_coupon_amt BETWEEN 14180.0 AND 15180.0 or ss_wholesale_cost BETWEEN 38.0 AND 58.0))
                                       Please refer to the previous TableScan [TS_0]
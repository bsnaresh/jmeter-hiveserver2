Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 4 (BROADCAST_EDGE), Map 5 (BROADCAST_EDGE), Reducer 6 (BROADCAST_EDGE)
Map 11 <- Map 14 (BROADCAST_EDGE)
Map 5 <- Reducer 10 (BROADCAST_EDGE)
Reducer 10 <- Union 9 (SIMPLE_EDGE)
Reducer 12 <- Map 11 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (SIMPLE_EDGE), Union 9 (CONTAINS)
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 6 <- Map 5 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Map 7 (SIMPLE_EDGE), Union 9 (CONTAINS)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 3 vectorized, llap
      File Output Operator [FS_147]
        Limit [LIM_146] (rows=1 width=96)
          Number of rows:100
          Select Operator [SEL_145] (rows=1 width=96)
            Output:["_col0","_col1"]
          <-Reducer 2 [SIMPLE_EDGE] vectorized, llap
            SHUFFLE [RS_144]
              Group By Operator [GBY_143] (rows=1 width=96)
                Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
              <-Map 1 [SIMPLE_EDGE] vectorized, llap
                SHUFFLE [RS_142]
                  PartitionCols:_col0
                  Group By Operator [GBY_141] (rows=6 width=96)
                    Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col7
                    Select Operator [SEL_140] (rows=3992957 width=96)
                      Output:["_col7","_col1"]
                      Map Join Operator [MAPJOIN_139] (rows=3992957 width=96)
                        Conds:MAPJOIN_138._col0=RS_130._col0(Inner),Output:["_col1","_col7"]
                      <-Map 5 [BROADCAST_EDGE] vectorized, llap
                        PARTITION_ONLY_SHUFFLE [RS_130]
                          PartitionCols:_col0
                          Map Join Operator [MAPJOIN_129] (rows=1 width=96)
                            Conds:SEL_128.substr(_col2, 1, 2)=RS_126.substr(_col0, 1, 2)(Inner),Output:["_col0","_col1"]
                          <-Reducer 10 [BROADCAST_EDGE] vectorized, llap
                            BROADCAST [RS_126]
                              PartitionCols:substr(_col0, 1, 2)
                              Select Operator [SEL_125] (rows=1 width=184)
                                Output:["_col0"]
                                Filter Operator [FIL_124] (rows=1 width=192)
                                  predicate:(_col1 = 2)
                                  Group By Operator [GBY_123] (rows=82 width=192)
                                    Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                                  <-Union 9 [SIMPLE_EDGE]
                                    <-Reducer 13 [CONTAINS] vectorized, llap
                                      Reduce Output Operator [RS_163]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_162] (rows=82 width=192)
                                          Output:["_col0","_col1"],aggregations:["count(_col1)"],keys:_col0
                                          Group By Operator [GBY_161] (rows=39 width=192)
                                            Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                                          <-Reducer 12 [SIMPLE_EDGE] vectorized, llap
                                            SHUFFLE [RS_160]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_159] (rows=39 width=192)
                                                Output:["_col0","_col1"],aggregations:["count(1)"],keys:_col0
                                                Select Operator [SEL_158] (rows=78 width=192)
                                                  Output:["_col0"]
                                                  Filter Operator [FIL_157] (rows=78 width=97)
                                                    predicate:(_col1 > 10)
                                                    Group By Operator [GBY_156] (rows=234 width=97)
                                                      Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                                                    <-Map 11 [SIMPLE_EDGE] vectorized, llap
                                                      SHUFFLE [RS_155]
                                                        PartitionCols:_col0
                                                        Group By Operator [GBY_154] (rows=234 width=97)
                                                          Output:["_col0","_col1"],aggregations:["count()"],keys:_col1
                                                          Map Join Operator [MAPJOIN_153] (rows=469 width=89)
                                                            Conds:SEL_152._col0=RS_150._col0(Inner),Output:["_col1"]
                                                          <-Map 14 [BROADCAST_EDGE] vectorized, llap
                                                            BROADCAST [RS_150]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_149] (rows=333 width=93)
                                                                Output:["_col0"]
                                                                Filter Operator [FIL_148] (rows=333 width=93)
                                                                  predicate:((c_preferred_cust_flag = 'y') and c_current_addr_sk is not null)
                                                                  TableScan [TS_20] (rows=1000 width=93)
                                                                    tpcds_orc@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_current_addr_sk","c_preferred_cust_flag"]
                                                          <-Select Operator [SEL_152] (rows=500 width=97)
                                                              Output:["_col0","_col1"]
                                                              Filter Operator [FIL_151] (rows=500 width=97)
                                                                predicate:(ca_address_sk is not null and substr(ca_zip, 1, 5) is not null)
                                                                TableScan [TS_17] (rows=500 width=97)
                                                                  tpcds_orc@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_zip"]
                                    <-Reducer 8 [CONTAINS] vectorized, llap
                                      Reduce Output Operator [RS_170]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_169] (rows=82 width=192)
                                          Output:["_col0","_col1"],aggregations:["count(_col1)"],keys:_col0
                                          Group By Operator [GBY_168] (rows=125 width=192)
                                            Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                                          <-Map 7 [SIMPLE_EDGE] vectorized, llap
                                            SHUFFLE [RS_167]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_166] (rows=125 width=192)
                                                Output:["_col0","_col1"],aggregations:["count(1)"],keys:_col0
                                                Select Operator [SEL_165] (rows=250 width=192)
                                                  Output:["_col0"]
                                                  Filter Operator [FIL_164] (rows=250 width=89)
                                                    predicate:(substr(ca_zip, 1, 5)) IN ('89436', '30868', '65085', '22977', '83927', '77557', '58429', '40697', '80614', '10502', '32779', '91137', '61265', '98294', '17921', '18427', '21203', '59362', '87291', '84093', '21505', '17184', '10866', '67898', '25797', '28055', '18377', '80332', '74535', '21757', '29742', '90885', '29898', '17819', '40811', '25990', '47513', '89531', '91068', '10391', '18846', '99223', '82637', '41368', '83658', '86199', '81625', '26696', '89338', '88425', '32200', '81427', '19053', '77471', '36610', '99823', '43276', '41249', '48584', '83550', '82276', '18842', '78890', '14090', '38123', '40936', '34425', '19850', '43286', '80072', '79188', '54191', '11395', '50497', '84861', '90733', '21068', '57666', '37119', '25004', '57835', '70067', '62878', '95806', '19303', '18840', '19124', '29785', '16737', '16022', '49613', '89977', '68310', '60069', '98360', '48649', '39050', '41793', '25002', '27413', '39736', '47208', '16515', '94808', '57648', '15009', '80015', '42961', '63982', '21744', '71853', '81087', '67468', '34175', '64008', '20261', '11201', '51799', '48043', '45645', '61163', '48375', '36447', '57042', '21218', '41100', '89951', '22745', '35851', '83326', '61125', '78298', '80752', '49858', '52940', '96976', '63792', '11376', '53582', '18717', '90226', '50530', '94203', '99447', '27670', '96577', '57856', '56372', '16165', '23427', '54561', '28806', '44439', '22926', '30123', '61451', '92397', '56979', '92309', '70873', '13355', '21801', '46346', '37562', '56458', '28286', '47306', '99555', '69399', '26234', '47546', '49661', '88601', '35943', '39936', '25632', '24611', '44166', '56648', '30379', '59785', '11110', '14329', '93815', '52226', '71381', '13842', '25612', '63294', '14664', '21077', '82626', '18799', '60915', '81020', '56447', '76619', '11433', '13414', '42548', '92713', '70467', '30884', '47484', '16072', '38936', '13036', '88376', '45539', '35901', '19506', '65690', '73957', '71850', '49231', '14276', '20005', '18384', '76615', '11635', '38177', '55607', '41369', '95447', '58581', '58149', '91946', '33790', '76232', '75692', '95464', '22246', '51061', '56692', '53121', '77209', '15482', '10688', '14868', '45907', '73520', '72666', '25734', '17959', '24677', '66446', '94627', '53535', '15560', '41967', '69297', '11929', '59403', '33283', '52232', '57350', '43933', '40921', '36635', '10827', '71286', '19736', '80619', '25251', '95042', '15526', '36496', '55854', '49124', '81980', '35375', '49157', '63512', '28944', '14946', '36503', '54010', '18767', '23969', '43905', '66979', '33113', '21286', '58471', '59080', '13395', '79144', '70373', '67031', '38360', '26705', '50906', '52406', '26066', '73146', '15884', '31897', '30045', '61068', '45550', '92454', '13376', '14354', '19770', '22928', '97790', '50723', '46081', '30202', '14410', '20223', '88500', '67298', '13261', '14172', '81410', '93578', '83583', '46047', '94167', '82564', '21156', '15799', '86709', '37931', '74703', '83103', '23054', '70470', '72008', '49247', '91911', '69998', '20961', '70070', '63197', '54853', '88191', '91830', '49521', '19454', '81450', '89091', '62378', '25683', '61869', '51744', '36580', '85778', '36871', '48121', '28810', '83712', '45486', '67393', '26935', '42393', '20132', '55349', '86057', '21309', '80218', '10094', '11357', '48819', '39734', '40758', '30432', '21204', '29467', '30214', '61024', '55307', '74621', '11622', '68908', '33032', '52868', '99194', '99900', '84936', '69036', '99149', '45013', '32895', '59004', '32322', '14933', '32936', '33562', '72550', '27385', '58049', '58200', '16808', '21360', '32961', '18586', '79307', '15492')
                                                    TableScan [TS_9] (rows=500 width=89)
                                                      tpcds_orc@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_zip"]
                          <-Select Operator [SEL_128] (rows=1902 width=185)
                              Output:["_col0","_col1","_col2"]
                              Filter Operator [FIL_127] (rows=1902 width=185)
                                predicate:(s_store_sk is not null and s_zip is not null)
                                TableScan [TS_6] (rows=1902 width=185)
                                  tpcds_orc@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_name","s_zip"]
                      <-Map Join Operator [MAPJOIN_138] (rows=94494222366 width=16)
                          Conds:SEL_137._col2=RS_119._col0(Inner),Output:["_col0","_col1"]
                        <-Map 4 [BROADCAST_EDGE] vectorized, llap
                          BROADCAST [RS_119]
                            PartitionCols:_col0
                            Select Operator [SEL_118] (rows=635 width=16)
                              Output:["_col0"]
                              Filter Operator [FIL_117] (rows=635 width=16)
                                predicate:((d_qoy = 1) and (d_year = 2002) and d_date_sk is not null)
                                TableScan [TS_3] (rows=73049 width=16)
                                  tpcds_orc@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_qoy"]
                          Dynamic Partitioning Event Operator [EVENT_122] (rows=317 width=16)
                            Group By Operator [GBY_121] (rows=317 width=16)
                              Output:["_col0"],keys:_col0
                              Select Operator [SEL_120] (rows=635 width=16)
                                Output:["_col0"]
                                 Please refer to the previous Select Operator [SEL_118]
                        <-Select Operator [SEL_137] (rows=271730420523 width=23)
                            Output:["_col0","_col1","_col2"]
                            Filter Operator [FIL_136] (rows=271730420523 width=23)
                              predicate:(ss_store_sk is not null and (ss_store_sk BETWEEN DynamicValue(RS_53_store_s_store_sk_min) AND DynamicValue(RS_53_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_53_store_s_store_sk_bloom_filter))))
                              TableScan [TS_0] (rows=275035746821 width=23)
                                tpcds_orc@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_store_sk","ss_net_profit"]
                              <-Reducer 6 [BROADCAST_EDGE] vectorized, llap
                                BROADCAST [RS_135]
                                  Group By Operator [GBY_134] (rows=1 width=24)
                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
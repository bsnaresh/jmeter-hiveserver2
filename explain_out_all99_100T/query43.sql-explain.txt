Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 4 (BROADCAST_EDGE), Map 5 (BROADCAST_EDGE), Reducer 6 (BROADCAST_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 6 <- Map 5 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 3 vectorized, llap
      File Output Operator [FS_75]
        Limit [LIM_74] (rows=100 width=244)
          Number of rows:100
          Select Operator [SEL_73] (rows=540 width=244)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
          <-Reducer 2 [SIMPLE_EDGE] vectorized, llap
            SHUFFLE [RS_72]
              Group By Operator [GBY_71] (rows=540 width=244)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)","sum(VALUE._col4)","sum(VALUE._col5)","sum(VALUE._col6)"],keys:KEY._col0, KEY._col1
              <-Map 1 [SIMPLE_EDGE] vectorized, llap
                SHUFFLE [RS_70]
                  PartitionCols:_col0, _col1
                  Group By Operator [GBY_69] (rows=44813520 width=244)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)","sum(_col5)","sum(_col6)","sum(_col7)","sum(_col8)"],keys:_col0, _col1
                    Select Operator [SEL_68] (rows=19404808918 width=287)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                      Map Join Operator [MAPJOIN_67] (rows=19404808918 width=287)
                        Conds:MAPJOIN_66._col0=RS_58._col0(Inner),Output:["_col1","_col5","_col7","_col8"]
                      <-Map 5 [BROADCAST_EDGE] vectorized, llap
                        PARTITION_ONLY_SHUFFLE [RS_58]
                          PartitionCols:_col0
                          Select Operator [SEL_57] (rows=380 width=204)
                            Output:["_col0","_col1","_col2"]
                            Filter Operator [FIL_56] (rows=380 width=203)
                              predicate:((s_gmt_offset = -6.0) and s_store_sk is not null)
                              TableScan [TS_6] (rows=1902 width=203)
                                tpcds_orc@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_id","s_store_name","s_gmt_offset"]
                      <-Map Join Operator [MAPJOIN_66] (rows=97023991564 width=107)
                          Conds:SEL_65._col2=RS_52._col0(Inner),Output:["_col0","_col1","_col5"]
                        <-Map 4 [BROADCAST_EDGE] vectorized, llap
                          BROADCAST [RS_52]
                            PartitionCols:_col0
                            Select Operator [SEL_51] (rows=652 width=103)
                              Output:["_col0","_col2"]
                              Filter Operator [FIL_50] (rows=652 width=103)
                                predicate:((d_year = 1998) and d_date_sk is not null)
                                TableScan [TS_3] (rows=73049 width=103)
                                  tpcds_orc@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_day_name"]
                          Dynamic Partitioning Event Operator [EVENT_55] (rows=326 width=103)
                            Group By Operator [GBY_54] (rows=326 width=103)
                              Output:["_col0"],keys:_col0
                              Select Operator [SEL_53] (rows=652 width=103)
                                Output:["_col0"]
                                 Please refer to the previous Select Operator [SEL_51]
                        <-Select Operator [SEL_65] (rows=271730420523 width=23)
                            Output:["_col0","_col1","_col2"]
                            Filter Operator [FIL_64] (rows=271730420523 width=23)
                              predicate:(ss_store_sk is not null and (ss_store_sk BETWEEN DynamicValue(RS_13_store_s_store_sk_min) AND DynamicValue(RS_13_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_13_store_s_store_sk_bloom_filter))))
                              TableScan [TS_0] (rows=275035746821 width=23)
                                tpcds_orc@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_store_sk","ss_sales_price"]
                              <-Reducer 6 [BROADCAST_EDGE] vectorized, llap
                                BROADCAST [RS_63]
                                  Group By Operator [GBY_62] (rows=1 width=24)
                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]